/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "dist";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./scripts/Game.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./scripts/Game.ts":
/*!*************************!*\
  !*** ./scripts/Game.ts ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ./Preloader */ \"./scripts/Preloader.ts\"), __webpack_require__(/*! ./MainMenu */ \"./scripts/MainMenu.ts\"), __webpack_require__(/*! ./cutscenes/Cutscene1 */ \"./scripts/cutscenes/Cutscene1.ts\"), __webpack_require__(/*! ./cutscenes/CutsceneDemoFinal */ \"./scripts/cutscenes/CutsceneDemoFinal.ts\"), __webpack_require__(/*! ./levels/Level1 */ \"./scripts/levels/Level1.ts\"), __webpack_require__(/*! ./levels/Level2 */ \"./scripts/levels/Level2.ts\"), __webpack_require__(/*! ./levels/Level3 */ \"./scripts/levels/Level3.ts\"), __webpack_require__(/*! ./levels/Level4 */ \"./scripts/levels/Level4.ts\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, Preloader_1, MainMenu_1, Cutscene1_1, CutsceneDemoFinal_1, Level1_1, Level2_1, Level3_1, Level4_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    class Game {\r\n        constructor() {\r\n            this.game = new Phaser.Game(800, 400, Phaser.CANVAS, 'content', {\r\n                preload: this.preload,\r\n                create: this.create\r\n            }, false, false, Phaser.Physics.Arcade);\r\n            this.game.state.add('Preloader', Preloader_1.Preloader, false);\r\n            this.game.state.add('MainMenu', MainMenu_1.MainMenu, false);\r\n            this.game.state.add('Cutscene1', Cutscene1_1.Cutscene1, false);\r\n            this.game.state.add('CutsceneDemoFinal', CutsceneDemoFinal_1.CutsceneDemoFinal, false);\r\n            this.game.state.add('Level1', Level1_1.Level1, false);\r\n            this.game.state.add('Level2', Level2_1.Level2, false);\r\n            this.game.state.add('Level3', Level3_1.Level3, false);\r\n            this.game.state.add('Level4', Level4_1.Level4, false);\r\n        }\r\n        preload() {\r\n            this.game.time.advancedTiming = true;\r\n        }\r\n        create() {\r\n            this.game.time.desiredFps = 60;\r\n            this.game.renderer.renderSession.roundPixels = true;\r\n            if (this.game.device.desktop) {\r\n                this.game.scale.pageAlignHorizontally = false;\r\n            }\r\n            else {\r\n                this.game.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;\r\n            }\r\n            this.game.physics.startSystem(Phaser.Physics.ARCADE);\r\n            this.game.physics.arcade.gravity.y = 200;\r\n            this.game.stage.backgroundColor = '#aedecb';\r\n            this.game.state.start('Preloader');\r\n        }\r\n    }\r\n    exports.Game = Game;\r\n    window.onload = () => {\r\n        const game = new Game();\r\n    };\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\n\n//# sourceURL=webpack:///./scripts/Game.ts?");

/***/ }),

/***/ "./scripts/MainMenu.ts":
/*!*****************************!*\
  !*** ./scripts/MainMenu.ts ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ./managers/SoundManager */ \"./scripts/managers/SoundManager.ts\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, SoundManager_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    class MainMenu extends Phaser.State {\r\n        constructor() {\r\n            super(...arguments);\r\n            this.paralaxSpeed = 450;\r\n        }\r\n        create() {\r\n            this.createParallax(450);\r\n            this.logo = this.add.sprite(this.game.camera.width / 2, -300, 'logo');\r\n            this.logo.anchor.setTo(0.5, 0.5);\r\n            this.logo.tint = 0x159b30;\r\n            this.add.tween(this.logo).to({ y: 120 }, 1000, Phaser.Easing.Elastic.Out, true, 1000);\r\n            this.startButton = this.game.add.button(this.game.camera.width / 2 - 72, 275, 'buttonstart', this.fadeOut, this, 0, 0, 1, 0);\r\n            this.startButton.scale.setTo(3);\r\n            this.startButton.alpha = 0;\r\n            this.add.tween(this.startButton).to({ alpha: 1 }, 1000, 'Linear', true);\r\n            this.soundButton = this.game.add.button(this.game.camera.width / 2 - this.game.camera.width / 2.5, 350, 'buttonsound', this.toggleMusic, this);\r\n            this.soundButton.scale.setTo(2);\r\n            this.soundButton.onInputUp.add(this.btnSoundUp, this);\r\n            this.soundButton.onInputDown.add(this.btnSoundDown, this);\r\n            this.soundButton.alpha = 0;\r\n            this.add.tween(this.soundButton).to({ alpha: 1 }, 1000, 'Linear', true);\r\n            this.soundManager = new SoundManager_1.SoundManager(this.game);\r\n        }\r\n        update() {\r\n            this.paralax5.tilePosition.x -= this.paralaxSpeed / 1000;\r\n            this.paralax4.tilePosition.x -= this.paralaxSpeed / 1875;\r\n            this.paralax3.tilePosition.x -= this.paralaxSpeed / 6000;\r\n            this.paralax2.tilePosition.x -= this.paralaxSpeed / 10000;\r\n        }\r\n        fadeOut() {\r\n            this.game.camera.fade(0x00000, 500);\r\n            this.add.tween(this.logo).to({ y: 800 }, 2000, Phaser.Easing.Linear.None, true);\r\n            this.game.camera.onFadeComplete.add(this.startGame, this);\r\n        }\r\n        btnSoundDown() {\r\n            if (!this.soundManager.musicMuted) {\r\n                this.soundButton.frame = 1;\r\n            }\r\n            else {\r\n                this.soundButton.frame = 3;\r\n            }\r\n        }\r\n        btnSoundUp() {\r\n            if (!this.soundManager.musicMuted) {\r\n                this.soundButton.frame = 0;\r\n            }\r\n            else {\r\n                this.soundButton.frame = 2;\r\n            }\r\n        }\r\n        toggleMusic() {\r\n            if (!this.soundManager.musicMuted) {\r\n                this.soundManager.music.pause();\r\n                this.soundManager.musicMuted = true;\r\n            }\r\n            else {\r\n                this.soundManager.music.play();\r\n                this.soundManager.musicMuted = false;\r\n            }\r\n        }\r\n        createParallax(compensationHeight) {\r\n            this.paralax2 = this.game.add.tileSprite(0, this.game.world.height - compensationHeight, this.game.world.width + 50, this.game.world.height + 100, 'jungle_paralax2');\r\n            this.paralax2.tileScale.x = 2;\r\n            this.paralax2.tileScale.y = 2;\r\n            this.paralax3 = this.game.add.tileSprite(0, this.game.world.height - compensationHeight - 5, this.game.world.width + 50, this.game.world.height + 100, 'jungle_paralax3');\r\n            this.paralax3.tileScale.x = 2;\r\n            this.paralax3.tileScale.y = 2;\r\n            this.paralax4 = this.game.add.tileSprite(0, this.game.world.height - compensationHeight - 20, this.game.world.width + 50, this.game.world.height + 100, 'jungle_paralax4');\r\n            this.paralax4.tileScale.x = 2;\r\n            this.paralax4.tileScale.y = 2;\r\n            this.paralax5 = this.game.add.tileSprite(0, this.game.world.height - compensationHeight - 30, this.game.world.width + 50, this.game.world.height + 100, 'jungle_paralax5');\r\n            this.paralax5.tileScale.x = 2;\r\n            this.paralax5.tileScale.y = 2;\r\n            this.paralax5.checkWorldBounds = true;\r\n        }\r\n        startGame() {\r\n            this.game.camera.onFadeComplete.removeAll();\r\n            this.game.state.start('Cutscene1', true, false, this.soundManager, this);\r\n        }\r\n    }\r\n    exports.MainMenu = MainMenu;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\n\n//# sourceURL=webpack:///./scripts/MainMenu.ts?");

/***/ }),

/***/ "./scripts/Preloader.ts":
/*!******************************!*\
  !*** ./scripts/Preloader.ts ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    class Preloader extends Phaser.State {\r\n        preload() {\r\n            this.game.load.spritesheet('dude', 'assets/sprites/dude_spritesheet.png?v=1', 16, 25, 9);\r\n            this.game.load.spritesheet('enemy1', 'assets/sprites/enemy.png?v=1', 21, 22, 5);\r\n            this.game.load.spritesheet('bat', 'assets/sprites/bat_spritesheet.png?v=1', 16, 16, 10);\r\n            this.game.load.spritesheet('greygem', 'assets/sprites/itens/spr_coin_cin.png?v=1', 16, 16, 4);\r\n            this.game.load.spritesheet('redgem', 'assets/sprites/itens/spr_coin_ver.png?v=1', 16, 16, 4);\r\n            this.game.load.spritesheet('torch', 'assets/sprites/animated_torch.png?v=1', 8, 26, 9);\r\n            this.game.load.spritesheet('shield', 'assets/sprites/shield.png?v=1', 16, 17, 6);\r\n            this.game.load.spritesheet('light', 'assets/sprites/light.png?v=1', 16, 16, 4);\r\n            this.game.load.spritesheet('platform', 'assets/sprites/platform.png?v=1', 32, 8, 2);\r\n            this.game.load.spritesheet('lever', 'assets/sprites/lever.png', 16, 16, 2);\r\n            this.game.load.image('heart', 'assets/sprites/itens/heart.png');\r\n            this.game.load.image('hangglider', 'assets/sprites/hangglider.png');\r\n            this.game.load.image('gate', 'assets/sprites/gate.png');\r\n            this.game.load.image('lumpofgrass', 'assets/sprites/lumpofgrass.png');\r\n            this.game.load.image('logo', 'assets/images/logo.png?v=1');\r\n            this.game.load.image('hud', 'assets/images/hud.png');\r\n            this.game.load.image('heart2', 'assets/images/heart.png');\r\n            this.game.load.bitmapFont('carrier_command', 'assets/fonts/carrier_command.png', 'assets/fonts/carrier_command.xml');\r\n            this.game.load.image('jungle_paralax5', 'assets/levels/jungle/plx-5.png?v=1');\r\n            this.game.load.image('jungle_paralax4', 'assets/levels/jungle/plx-4.png?v=1');\r\n            this.game.load.image('jungle_paralax3', 'assets/levels/jungle/plx-3.png?v=1');\r\n            this.game.load.image('jungle_paralax2', 'assets/levels/jungle/plx-2.png?v=1');\r\n            this.game.load.spritesheet('jungle_tileset', 'assets/levels/jungle/jungle_tileset.png', 16, 16);\r\n            this.game.load.tilemap('tileMap_level1', 'assets/levels/jungle1.json?v=1', null, Phaser.Tilemap.TILED_JSON);\r\n            this.game.load.tilemap('tileMap_level2', 'assets/levels/jungle2.json?v=1', null, Phaser.Tilemap.TILED_JSON);\r\n            this.game.load.tilemap('tileMap_level3', 'assets/levels/jungle3.json?v=1', null, Phaser.Tilemap.TILED_JSON);\r\n            this.game.load.tilemap('tileMap_level4', 'assets/levels/jungle4.json?v=1', null, Phaser.Tilemap.TILED_JSON);\r\n            this.game.load.tilemap('cutscene1_tilemap', 'assets/cutscenes/cutscene1.json?v=1', null, Phaser.Tilemap.TILED_JSON);\r\n            this.game.load.image('arrowkeys', 'assets/sprites/arrows.png');\r\n            this.game.load.image('shift', 'assets/sprites/shift.png');\r\n            this.game.load.spritesheet('buttonright', 'assets/buttons/btn_right.png', 96, 96);\r\n            this.game.load.spritesheet('buttonleft', 'assets/buttons/btn_left.png', 96, 96);\r\n            this.game.load.spritesheet('buttonfire', 'assets/buttons/btn_a.png', 96, 96);\r\n            this.game.load.spritesheet('buttonjump', 'assets/buttons/btn_b.png', 96, 96);\r\n            this.game.load.spritesheet('buttonglow', 'assets/buttons/btn_glow.png', 144, 144);\r\n            this.game.load.spritesheet('buttonstart', 'assets/buttons/startbutton.png', 48, 16);\r\n            this.game.load.spritesheet('buttonsound', 'assets/buttons/soundbutton.png', 16, 16);\r\n            this.game.load.spritesheet('buttonstar', 'assets/buttons/starbutton.png', 16, 16);\r\n            this.game.load.audio('coincatch', 'assets/sounds/sfx/coin-catch.mp3');\r\n            this.game.load.audio('redcoincatch', 'assets/sounds/sfx/red-coin-catch.mp3');\r\n            this.game.load.audio('damage', 'assets/sounds/sfx/damage.mp3');\r\n            this.game.load.audio('enemydamage', 'assets/sounds/sfx/enemy-damage.mp3');\r\n            this.game.load.audio('fall', 'assets/sounds/sfx/fall.mp3');\r\n            this.game.load.audio('jump', 'assets/sounds/sfx/jump.mp3');\r\n            this.game.load.audio('clickin', 'assets/sounds/sfx/click-in.mp3');\r\n            this.game.load.audio('clickout', 'assets/sounds/sfx/click-out.mp3');\r\n            this.game.load.audio('leverpull', 'assets/sounds/sfx/lever-pull.mp3');\r\n            this.game.load.audio('gateopen', 'assets/sounds/sfx/gate-open.mp3');\r\n            this.game.load.audio('gateclose', 'assets/sounds/sfx/gate-close.mp3');\r\n            this.game.load.audio('bgmusic', 'assets/sounds/music/bg.mp3');\r\n            this.game.load.audio('bgmusiclvl3', 'assets/sounds/music/bg-lvl3.mp3');\r\n            this.game.load.audio('bgdemofinal', 'assets/sounds/music/bg-demofinal.mp3');\r\n        }\r\n        create() {\r\n            this.game.state.start('MainMenu');\r\n        }\r\n    }\r\n    exports.Preloader = Preloader;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\n\n//# sourceURL=webpack:///./scripts/Preloader.ts?");

/***/ }),

/***/ "./scripts/cutscenes/Cutscene1.ts":
/*!****************************************!*\
  !*** ./scripts/cutscenes/Cutscene1.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../levels/LevelManager */ \"./scripts/levels/LevelManager.ts\"), __webpack_require__(/*! ../levels/LevelBase */ \"./scripts/levels/LevelBase.ts\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, LevelManager_1, LevelBase_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    class Cutscene1 extends Phaser.State {\r\n        constructor() {\r\n            super(...arguments);\r\n            this.index = 0;\r\n            this.narratorLines = [\r\n                ' ',\r\n                'This is Dude',\r\n                ' ',\r\n                'he has the most generic name ever',\r\n                ' ',\r\n                'yet he is a very happy dude',\r\n                'he lives in a land ruled by a king',\r\n                'and his daughter, the princess... Princess.',\r\n                ' ',\r\n                'Yes, the name of the princess is \"Princess\"',\r\n                ' ',\r\n                'One day...',\r\n                ' ',\r\n                'Yes she was kidnapped',\r\n                'By an evil goblin!',\r\n                'Immeditialy, Dude presented himself to rescue her',\r\n                'and save the kingdom once and for all!',\r\n                ' ',\r\n            ];\r\n            this.dudeLines = [\r\n                ' ',\r\n                ' ',\r\n                'sup',\r\n                ' ',\r\n                'Thanks',\r\n                ' ',\r\n                ' ',\r\n                ' ',\r\n                'wtf, her name is \"Princess\"?!',\r\n                ' ',\r\n                'jesus, you suck at names',\r\n                ' ',\r\n                'Let me guess, she was kidnapped',\r\n                ' ',\r\n                ' ',\r\n                ' ',\r\n                ' ',\r\n                'Let\\'s do this!',\r\n            ];\r\n        }\r\n        init(soundManager, mainMenu) {\r\n            this.soundManager = soundManager;\r\n            mainMenu = null;\r\n        }\r\n        create() {\r\n            this.levelBase = new LevelBase_1.LevelBase();\r\n            this.levelManager = new LevelManager_1.LevelManager(this.game, this.levelBase, 'Level1', this.soundManager);\r\n            this.input.onDown.addOnce(this.fadeOut, this);\r\n            this.levelManager.createMap('cutscene1_tilemap');\r\n            this.levelManager.createParallax(500);\r\n            this.game.world.bringToTop(this.levelManager.level.back);\r\n            this.game.world.bringToTop(this.levelManager.level.walls);\r\n            this.dudeSprite = this.game.add.sprite(230, 250, 'dude');\r\n            this.dudeSprite.scale.setTo(2, 2);\r\n            this.dudeSprite.visible = false;\r\n            this.clickToSkip = this.game.add.bitmapText(400, 15, 'carrier_command', 'Click to skip', 9);\r\n            this.clickToSkip.anchor.x = 0.5;\r\n            this.narratorPhrase = this.game.add.bitmapText(400, 370, 'carrier_command', '', 11);\r\n            this.narratorPhrase.anchor.x = 0.5;\r\n            this.dudePhrase = this.game.add.bitmapText(290, 270, 'carrier_command', '', 10);\r\n            this.nextLine();\r\n        }\r\n        updateLine() {\r\n            this.dudeSprite.frame = 0;\r\n            this.narratorPhrase.setText(this.narratorLines[this.index]);\r\n            this.dudePhrase.setText(this.dudeLines[this.index]);\r\n            if (this.index == 2) {\r\n                this.soundManager.jump.play();\r\n                this.dudeSprite.visible = true;\r\n            }\r\n            if (this.index == 4 || this.index == 8 || this.index == 9) {\r\n                this.dudeSprite.frame = 4;\r\n            }\r\n            if (this.index == 10) {\r\n                this.soundManager.damage.play();\r\n                this.dudeSprite.frame = 6;\r\n            }\r\n            this.game.time.events.add(Phaser.Timer.SECOND * 2.2, this.nextLine, this);\r\n        }\r\n        nextLine() {\r\n            this.game.time.events.removeAll();\r\n            this.index++;\r\n            if (this.index < this.narratorLines.length) {\r\n                this.game.time.events.repeat(80, this.narratorLines[this.index].length + 1, this.updateLine, this);\r\n            }\r\n            else {\r\n                this.fadeOut();\r\n            }\r\n        }\r\n        fadeOut() {\r\n            this.game.camera.fade(0x00000, 500);\r\n            this.game.camera.onFadeComplete.add(this.startGame, this);\r\n        }\r\n        startGame() {\r\n            this.index = 0;\r\n            this.game.camera.onFadeComplete.removeAll();\r\n            this.game.state.start('Level1', true, false, this.soundManager, this.levelBase, this.levelManager, this);\r\n        }\r\n    }\r\n    exports.Cutscene1 = Cutscene1;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\n\n//# sourceURL=webpack:///./scripts/cutscenes/Cutscene1.ts?");

/***/ }),

/***/ "./scripts/cutscenes/CutsceneDemoFinal.ts":
/*!************************************************!*\
  !*** ./scripts/cutscenes/CutsceneDemoFinal.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../levels/LevelManager */ \"./scripts/levels/LevelManager.ts\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, LevelManager_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    class CutsceneDemoFinal extends Phaser.State {\r\n        constructor() {\r\n            super(...arguments);\r\n            this.redGemsHintText = '';\r\n            this.maxRedGems = 4;\r\n            this.maxGems = 55;\r\n            this.starButtons = [];\r\n            this.voted = false;\r\n        }\r\n        init(player, soundManager, previousLevelBase, previousLevelManager) {\r\n            this.lastPlayer = player;\r\n            this.soundManager = soundManager;\r\n            this.levelBase = previousLevelBase;\r\n            player.destroy();\r\n            previousLevelBase = null;\r\n            previousLevelManager = null;\r\n        }\r\n        create() {\r\n            this.soundManager.music.stop();\r\n            this.soundManager.musicdemofinal.loop = true;\r\n            this.soundManager.musicdemofinal.play();\r\n            this.levelManager = new LevelManager_1.LevelManager(this.game, this.levelBase, 'Level1', this.soundManager);\r\n            this.levelManager.createParallax(450);\r\n            this.lastPlayer.bringToTop();\r\n            this.gemSprite = this.game.add.sprite(200, 120, 'greygem');\r\n            this.gemSprite.scale.set(3);\r\n            this.redGemSprite = this.game.add.sprite(500, 120, 'redgem');\r\n            this.redGemSprite.scale.set(3);\r\n            this.gemsAmount = this.game.add.bitmapText(250, 135, 'carrier_command', this.lastPlayer.gems.toString() + '/' + this.maxGems, 20);\r\n            this.gemsAmount = this.game.add.bitmapText(550, 135, 'carrier_command', this.lastPlayer.redGems.toString() + '/' + this.maxRedGems, 20);\r\n            if (this.maxRedGems == this.lastPlayer.redGems) {\r\n                this.redGemsHintText = 'Mysterious voice says: \\n\\n\\t' +\r\n                    '\"You ve gathered all of them so far, thank you ...\\n\\n\\t\\t...my hero.\"' +\r\n                    '\\n\\n\\n\\n            (remember this on the full game)';\r\n            }\r\n            else {\r\n                this.redGemsHintText = 'Mysterious voice says: \"Bring me the gems...\"';\r\n            }\r\n            this.demoMessage = this.game.add.bitmapText(400, 45, 'carrier_command', '  You have completed the Demo!\\n\\nThank you very much for playing!', 14);\r\n            this.demoMessage.anchor.x = 0.5;\r\n            this.redGemsHint = this.game.add.bitmapText(400, 200, 'carrier_command', this.redGemsHintText, 9);\r\n            this.redGemsHint.anchor.x = 0.5;\r\n            this.redGemsHint.alpha = 0;\r\n            this.rateMessage = this.game.add.bitmapText(400, 350, 'carrier_command', 'Please rate this demo!', 9);\r\n            this.rateMessage.anchor.x = 0.5;\r\n            this.starButtons.push(this.game.add.button(400 - 80, 365, 'buttonstar', this.actionOnClick(1), this, 1, 0, 1));\r\n            this.starButtons.push(this.game.add.button(400 - 48, 365, 'buttonstar', this.actionOnClick(2), this, 1, 0, 1));\r\n            this.starButtons.push(this.game.add.button(400 - 16, 365, 'buttonstar', this.actionOnClick(3), this, 1, 0, 1));\r\n            this.starButtons.push(this.game.add.button(400 + 16, 365, 'buttonstar', this.actionOnClick(4), this, 1, 0, 1));\r\n            this.starButtons.push(this.game.add.button(400 + 48, 365, 'buttonstar', this.actionOnClick(5), this, 1, 0, 1));\r\n            this.starButtons.forEach((button, index) => {\r\n                button.scale.setTo(2);\r\n                button.onInputOver.add(this.hoverStar(index), this);\r\n                button.onInputOut.add(this.notHoveringStars, this);\r\n            });\r\n            this.game.time.events.add(Phaser.Timer.SECOND * 5, this.showMisteriousMessage, this);\r\n        }\r\n        hoverStar(starIndex) {\r\n            return function mouseOver() {\r\n                this.starButtons.forEach((button, index) => {\r\n                    if (index <= starIndex)\r\n                        button.frame = 1;\r\n                });\r\n            };\r\n        }\r\n        notHoveringStars() {\r\n            if (!this.voted) {\r\n                this.starButtons.forEach((button, index) => {\r\n                    button.frame = 0;\r\n                });\r\n            }\r\n        }\r\n        actionOnClick(index) {\r\n            return function castVote() {\r\n                if (!this.voted) {\r\n                    this.voted = true;\r\n                    this.rateMessage.setText('Thank you for rating!');\r\n                    this.starButtons.forEach(button => {\r\n                        button.destroy();\r\n                    });\r\n                    let xhttpPut = new XMLHttpRequest();\r\n                    xhttpPut.onreadystatechange = function () {\r\n                        if (this.readyState == 4 && this.status == 200) {\r\n                            console.log('Success');\r\n                        }\r\n                    };\r\n                    let xhttpGet = new XMLHttpRequest();\r\n                    xhttpGet.onreadystatechange = function () {\r\n                        if (this.readyState == 4 && this.status == 200) {\r\n                            let notas = JSON.parse(this.responseText).result.notas;\r\n                            notas.push(index);\r\n                            xhttpPut.open('PUT', 'https://www.jsonstore.io/16824c0f7a1696d7acfabe21392bd07d8afcc0ba76cb366ab189dfa94186dc08', true);\r\n                            xhttpPut.setRequestHeader('Content-Type', 'application/json;charset=UTF-8');\r\n                            xhttpPut.send(JSON.stringify({ 'notas': notas }));\r\n                        }\r\n                    };\r\n                    xhttpGet.open('GET', 'https://www.jsonstore.io/16824c0f7a1696d7acfabe21392bd07d8afcc0ba76cb366ab189dfa94186dc08', true);\r\n                    xhttpGet.send();\r\n                }\r\n            };\r\n        }\r\n        showMisteriousMessage() {\r\n            this.game.time.events.removeAll();\r\n            this.add.tween(this.redGemsHint).to({ alpha: 1 }, 1000, 'Linear', true);\r\n        }\r\n        fadeOut() {\r\n            this.game.camera.fade(0x00000, 500);\r\n            this.game.camera.onFadeComplete.add(this.startGame, this);\r\n        }\r\n        startGame() {\r\n            this.soundManager.music.stop();\r\n            this.soundManager.musicdemofinal.stop();\r\n            this.soundManager = null;\r\n            this.game.camera.onFadeComplete.removeAll();\r\n            this.game.state.start('MainMenu', true, false);\r\n        }\r\n    }\r\n    exports.CutsceneDemoFinal = CutsceneDemoFinal;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\n\n//# sourceURL=webpack:///./scripts/cutscenes/CutsceneDemoFinal.ts?");

/***/ }),

/***/ "./scripts/elements/enemies/Bat.ts":
/*!*****************************************!*\
  !*** ./scripts/elements/enemies/Bat.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    class Bat extends Phaser.Sprite {\r\n        constructor(game, x, y, gravity, speed, player) {\r\n            super(game, x, y, 'bat', 0);\r\n            this.speed = 125;\r\n            // attributes\r\n            this.speed = speed;\r\n            this.player = player;\r\n            this.fieldOfView = 200;\r\n            // sprite size\r\n            this.size = 2;\r\n            this.scale.setTo(this.size, this.size);\r\n            // sprite anchor\r\n            this.anchor.setTo(0.5, 0);\r\n            this.wakeAnim = this.animations.add('wake', [0, 1, 2, 3, 4], 8, false);\r\n            this.flyAnim = this.animations.add('fly', [5, 6, 7, 8, 9], 8, true);\r\n            this.wakeAnim.onComplete.add(this.startFly, this);\r\n            this.isSleeping = true;\r\n            this.isChasing = false;\r\n            // physics\r\n            this.game.physics.arcade.enableBody(this);\r\n            this.body.setSize(16, 16, 0, 0);\r\n            this.body.collideWorldBounds = true;\r\n            this.body.gravity.y = -gravity;\r\n            game.add.existing(this);\r\n        }\r\n        update() {\r\n            this.body.velocity.x = 0;\r\n            if (this.isSleeping) {\r\n                if (this.checkIfPlayerIsInRange()) {\r\n                    this.wake();\r\n                }\r\n            }\r\n            if (this.isChasing) {\r\n                this.chase();\r\n            }\r\n        }\r\n        wake() {\r\n            this.wakeAnim.play();\r\n            this.fieldOfView += 75;\r\n            this.isSleeping = false;\r\n        }\r\n        startFly() {\r\n            this.flyAnim.play();\r\n            this.isChasing = true;\r\n        }\r\n        chase() {\r\n            if (this.checkIfPlayerIsInRange()) {\r\n                this.game.physics.arcade.moveToObject(this, this.player, this.speed);\r\n            }\r\n            else {\r\n                this.body.velocity.x = 0;\r\n                this.body.velocity.y = 0;\r\n            }\r\n            if (this.body.velocity.x < 0) {\r\n                if (this.scale.x == this.size) {\r\n                    this.scale.x = -this.size;\r\n                }\r\n            }\r\n            else {\r\n                if (this.scale.x == -this.size) {\r\n                    this.scale.x = this.size;\r\n                }\r\n            }\r\n        }\r\n        checkIfPlayerIsInRange() {\r\n            return ((this.player.position.x > this.position.x - this.fieldOfView &&\r\n                this.player.position.x < this.position.x + this.fieldOfView) &&\r\n                this.player.position.y < this.position.y + this.fieldOfView);\r\n        }\r\n    }\r\n    exports.Bat = Bat;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\n\n//# sourceURL=webpack:///./scripts/elements/enemies/Bat.ts?");

/***/ }),

/***/ "./scripts/elements/enemies/Enemy.ts":
/*!*******************************************!*\
  !*** ./scripts/elements/enemies/Enemy.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    class Enemy extends Phaser.Sprite {\r\n        constructor(game, x, y, gravity, speed) {\r\n            super(game, x, y, 'enemy1', 0);\r\n            // attributes\r\n            this.speed = speed;\r\n            // sprite size\r\n            this.size = 1.8;\r\n            this.scale.setTo(this.size, this.size);\r\n            // sprite anchor\r\n            this.anchor.setTo(0.5, 0);\r\n            this.animations.add('walk', [4, 3, 2, 3, 4, 1, 0, 1], 10, true);\r\n            this.animations.play('walk');\r\n            // physics\r\n            this.game.physics.arcade.enableBody(this);\r\n            this.body.setSize(21, 19, 0, 0);\r\n            this.body.collideWorldBounds = true;\r\n            this.body.gravity.y = gravity;\r\n            // initialize movement\r\n            this.movingRight = true;\r\n            game.add.existing(this);\r\n        }\r\n        update() {\r\n            this.body.velocity.x = 0;\r\n            if (this.movingRight)\r\n                this.moveRight();\r\n            else\r\n                this.moveLeft();\r\n            if (this.body.blocked.right) {\r\n                this.movingRight = false;\r\n            }\r\n            if (this.body.blocked.left) {\r\n                this.movingRight = true;\r\n            }\r\n        }\r\n        moveRight() {\r\n            this.body.velocity.x = this.speed;\r\n            if (this.scale.x == -this.size) {\r\n                this.scale.x = this.size;\r\n            }\r\n        }\r\n        moveLeft() {\r\n            this.body.velocity.x = -this.speed;\r\n            if (this.scale.x == this.size) {\r\n                this.scale.x = -this.size;\r\n            }\r\n        }\r\n    }\r\n    exports.Enemy = Enemy;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\n\n//# sourceURL=webpack:///./scripts/elements/enemies/Enemy.ts?");

/***/ }),

/***/ "./scripts/elements/items/HangGlider.ts":
/*!**********************************************!*\
  !*** ./scripts/elements/items/HangGlider.ts ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    class HangGlider extends Phaser.Sprite {\r\n        constructor(game, x, y, gravity) {\r\n            super(game, x, y, 'hangglider', 0);\r\n            this.caught = false;\r\n            this.name = 'hangglider';\r\n            this.respawns = true;\r\n            this.game = game;\r\n            // sprite size\r\n            this.size = 2;\r\n            this.scale.setTo(this.size, this.size);\r\n            // sprite anchor\r\n            this.anchor.setTo(0.5, 0);\r\n            // physics\r\n            this.game.physics.arcade.enableBody(this);\r\n            this.body.setSize(30, 26, 0, 0);\r\n            this.body.collideWorldBounds = true;\r\n            this.body.gravity.y = gravity;\r\n            game.add.existing(this);\r\n        }\r\n        update() {\r\n            if (this.caught) {\r\n                this.body.enable = false;\r\n                this.visible = false;\r\n            }\r\n            else {\r\n                this.body.enable = true;\r\n                this.visible = true;\r\n            }\r\n        }\r\n    }\r\n    exports.HangGlider = HangGlider;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\n\n//# sourceURL=webpack:///./scripts/elements/items/HangGlider.ts?");

/***/ }),

/***/ "./scripts/elements/items/Light.ts":
/*!*****************************************!*\
  !*** ./scripts/elements/items/Light.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    class Light extends Phaser.Sprite {\r\n        constructor(game, x, y, gravity) {\r\n            super(game, x, y, 'light', 0);\r\n            this.name = 'light';\r\n            this.respawns = false;\r\n            this.game = game;\r\n            // sprite size\r\n            this.size = 2;\r\n            this.scale.setTo(this.size, this.size);\r\n            // animation\r\n            this.frame = 0;\r\n            this.animations.add('shine', [0, 1, 2, 3, 2, 1], 8, true);\r\n            this.animations.play('shine');\r\n            // sprite anchor\r\n            this.anchor.setTo(0.5, 0);\r\n            // physics\r\n            this.game.physics.arcade.enableBody(this);\r\n            this.body.setSize(12, 9, 0, 0);\r\n            this.body.collideWorldBounds = true;\r\n            this.body.gravity.y = gravity;\r\n            game.add.existing(this);\r\n        }\r\n    }\r\n    exports.Light = Light;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\n\n//# sourceURL=webpack:///./scripts/elements/items/Light.ts?");

/***/ }),

/***/ "./scripts/elements/items/Shield.ts":
/*!******************************************!*\
  !*** ./scripts/elements/items/Shield.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    class Shield extends Phaser.Sprite {\r\n        constructor(game, x, y, gravity) {\r\n            super(game, x, y, 'shield', 0);\r\n            this.name = 'shield';\r\n            this.respawns = false;\r\n            this.game = game;\r\n            // sprite size\r\n            this.size = 2;\r\n            this.scale.setTo(this.size, this.size);\r\n            // animation\r\n            this.frame = 3;\r\n            this.animations.add('shine', [0, 0, 0, 0, 0, 0, 0,\r\n                0, 0, 0, 0, 1, 2, 3,\r\n                4, 5, 4, 3, 2, 1, 0], 15, true);\r\n            this.animations.play('shine');\r\n            // sprite anchor\r\n            this.anchor.setTo(0.5, 0);\r\n            // physics\r\n            this.game.physics.arcade.enableBody(this);\r\n            this.body.setSize(16, 12, 0, 0);\r\n            this.body.collideWorldBounds = true;\r\n            this.body.gravity.y = gravity;\r\n            game.add.existing(this);\r\n        }\r\n    }\r\n    exports.Shield = Shield;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\n\n//# sourceURL=webpack:///./scripts/elements/items/Shield.ts?");

/***/ }),

/***/ "./scripts/elements/objects/Gate.ts":
/*!******************************************!*\
  !*** ./scripts/elements/objects/Gate.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    class Gate extends Phaser.Sprite {\r\n        constructor(game, x, y, activationFee, gravity, soundManager) {\r\n            super(game, x, y, 'gate', 0);\r\n            this.game = game;\r\n            // properties\r\n            this.open = false;\r\n            this.lastStatus = false;\r\n            this.activationFee = activationFee;\r\n            this.activated = 0;\r\n            this.activationsLeft = this.activationFee - this.activated;\r\n            // sprite size\r\n            this.size = 2;\r\n            this.scale.setTo(this.size, this.size);\r\n            // sprite anchor\r\n            this.anchor.setTo(0.5, 0);\r\n            // text\r\n            this.activationFeeText = this.game.add.bitmapText(this.x, this.y + 10, 'carrier_command', this.activationsLeft.toString(), 12);\r\n            this.activationFeeText.visible = false;\r\n            // physics\r\n            this.game.physics.arcade.enableBody(this);\r\n            this.body.setSize(16, 44, 0, 0);\r\n            this.body.collideWorldBounds = true;\r\n            this.body.gravity.y = gravity;\r\n            this.body.bounce.y = 0;\r\n            this.body.immovable = true;\r\n            // sound\r\n            this.soundManager = soundManager;\r\n            game.add.existing(this);\r\n        }\r\n        update() {\r\n            this.activationsLeft = this.activationFee - this.activated;\r\n            this.activationFeeText.setText(this.activationsLeft.toString());\r\n            this.activationFeeText.position.x = this.x + 22;\r\n            this.activationFeeText.position.y = this.y + 2;\r\n            if (this.activated == this.activationFee) {\r\n                this.openGate();\r\n            }\r\n            else {\r\n                this.closeGate();\r\n            }\r\n            this.lastStatus = this.open;\r\n        }\r\n        openGate() {\r\n            this.open = true;\r\n            this.visible = false;\r\n            this.activationFeeText.visible = false;\r\n            if (this.lastStatus != this.open)\r\n                this.soundManager.gateopen.play();\r\n        }\r\n        closeGate() {\r\n            this.open = false;\r\n            this.visible = true;\r\n            this.activationFeeText.visible = true;\r\n            if (this.lastStatus != this.open)\r\n                this.soundManager.gateclose.play();\r\n        }\r\n    }\r\n    exports.Gate = Gate;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\n\n//# sourceURL=webpack:///./scripts/elements/objects/Gate.ts?");

/***/ }),

/***/ "./scripts/elements/objects/Lever.ts":
/*!*******************************************!*\
  !*** ./scripts/elements/objects/Lever.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    class Lever extends Phaser.Sprite {\r\n        constructor(game, x, y, gravity, soundManager) {\r\n            super(game, x, y, 'lever', 0);\r\n            this.game = game;\r\n            // sprite size\r\n            this.size = 2;\r\n            this.scale.setTo(this.size, this.size);\r\n            // sprite anchor\r\n            this.anchor.setTo(0.5, 0);\r\n            // physics\r\n            this.game.physics.arcade.enableBody(this);\r\n            this.body.setSize(16, 12, 0, 0);\r\n            this.body.collideWorldBounds = true;\r\n            this.body.gravity.y = gravity;\r\n            this.body.bounce.y = 0;\r\n            // sound\r\n            this.soundManager = soundManager;\r\n            game.add.existing(this);\r\n        }\r\n        update() {\r\n            this.wasTouching = !this.body.touching.none;\r\n        }\r\n        toggle() {\r\n            if (this.active && !this.wasTouching) {\r\n                this.deactivate();\r\n            }\r\n            else if (!this.active && !this.wasTouching) {\r\n                this.activate();\r\n            }\r\n        }\r\n        activate() {\r\n            this.active = true;\r\n            this.frame = 1;\r\n            this.soundManager.leverpull.play();\r\n        }\r\n        deactivate() {\r\n            this.active = false;\r\n            this.frame = 0;\r\n            this.soundManager.leverpull.play();\r\n        }\r\n    }\r\n    exports.Lever = Lever;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\n\n//# sourceURL=webpack:///./scripts/elements/objects/Lever.ts?");

/***/ }),

/***/ "./scripts/elements/objects/Platform.ts":
/*!**********************************************!*\
  !*** ./scripts/elements/objects/Platform.ts ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    class Platform extends Phaser.Sprite {\r\n        constructor(game, x, y, gravity, soundManager) {\r\n            super(game, x, y, 'platform', 0);\r\n            this.game = game;\r\n            this.active = false;\r\n            // sprite size\r\n            this.size = 2;\r\n            this.scale.setTo(this.size, this.size);\r\n            // sprite anchor\r\n            this.anchor.setTo(0.5, 0);\r\n            // physics\r\n            this.game.physics.arcade.enableBody(this);\r\n            this.body.setSize(32, 3, 0, 0);\r\n            this.body.collideWorldBounds = true;\r\n            this.body.gravity.y = gravity;\r\n            this.body.bounce.y = 0;\r\n            // sound\r\n            this.soundManager = soundManager;\r\n            this.canPlaySound = true;\r\n            game.add.existing(this);\r\n        }\r\n        update() {\r\n            if (this.body.touching.none) {\r\n                this.deactivate();\r\n            }\r\n            else {\r\n                this.activate();\r\n            }\r\n        }\r\n        activate() {\r\n            this.active = true;\r\n            this.frame = 1;\r\n            if (this.canPlaySound) {\r\n                this.soundManager.clickin.play();\r\n                this.canPlaySound = false;\r\n            }\r\n        }\r\n        deactivate() {\r\n            this.active = false;\r\n            this.frame = 0;\r\n            if (!this.canPlaySound) {\r\n                this.soundManager.clickout.play();\r\n                this.canPlaySound = true;\r\n            }\r\n        }\r\n    }\r\n    exports.Platform = Platform;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\n\n//# sourceURL=webpack:///./scripts/elements/objects/Platform.ts?");

/***/ }),

/***/ "./scripts/elements/player/Player.ts":
/*!*******************************************!*\
  !*** ./scripts/elements/player/Player.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../../managers/ControllerManager */ \"./scripts/managers/ControllerManager.ts\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, ControllerManager_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    class Player extends Phaser.Sprite {\r\n        constructor(game, x, y, speed, gravity, gems, redGems, lives, soundManager) {\r\n            super(game, x, y, 'dude', 0);\r\n            this.gems = gems;\r\n            this.redGems = redGems;\r\n            this.lives = lives;\r\n            // attributes\r\n            this.spawnX = x;\r\n            this.spawnY = y;\r\n            this.playingOnDesktop = this.game.device.desktop;\r\n            this.localGravity = gravity;\r\n            this.speedBonus = 50;\r\n            this.jumpBonus = 50;\r\n            this.speed = speed;\r\n            this.jumpStrength = gravity + (gravity * 0.4);\r\n            this.jumping = false;\r\n            this.pressingUp = false;\r\n            this.dead = false;\r\n            this.fadeComplete = false;\r\n            this.defaultMaxLightRadius = 250;\r\n            this.defaultMinLightRadius = 120;\r\n            this.lightRadius = this.defaultMaxLightRadius;\r\n            // shield attributes\r\n            this.shieldMaxTime = 10;\r\n            this.hangGliderMaxTime = 15;\r\n            this.shieldSeconds = this.shieldMaxTime;\r\n            this.hangGliderSeconds = this.hangGliderMaxTime;\r\n            this.lastShieldSeconds = 0;\r\n            this.lastHangGliderSeconds = 0;\r\n            this.shieldTimer = this.game.add.bitmapText(this.x, this.y + 10, 'carrier_command', this.shieldSeconds.toString(), 12);\r\n            this.shieldTimer.visible = false;\r\n            this.hangGliderTimer = this.game.add.bitmapText(this.x, this.y + 10, 'carrier_command', this.hangGliderSeconds.toString(), 12);\r\n            this.hangGliderTimer.visible = false;\r\n            this.hasShield = false;\r\n            this.hasHangGlider = false;\r\n            this.shieldSprite = this.game.add.sprite(this.x, this.y + 10, 'shield');\r\n            this.shieldSprite.scale.setTo(2, 2);\r\n            this.shieldSprite.anchor.setTo(0.5, 0);\r\n            this.shieldSprite.visible = false;\r\n            this.hangGliderSprite = this.game.add.sprite(this.x, this.y + 10, 'hangglider');\r\n            this.hangGliderSprite.scale.setTo(2, 2);\r\n            this.hangGliderSprite.anchor.setTo(0.5, 0);\r\n            this.hangGliderSprite.visible = false;\r\n            this.hangGliderGravityFactor = 1.4;\r\n            // sprite size\r\n            this.size = 1.8;\r\n            this.scale.setTo(this.size, this.size);\r\n            // sprite anchor\r\n            this.anchor.setTo(0.5, 0);\r\n            this.animations.add('walk', [0, 1, 2, 3], 10, true);\r\n            this.animations.add('damaged', [4, 5, 6, 7], 10, false);\r\n            this.animSpeeds = [8, 13];\r\n            // physics\r\n            this.game.physics.arcade.enableBody(this);\r\n            this.body.setSize(16, 21, 0, 0);\r\n            this.body.collideWorldBounds = false;\r\n            this.body.gravity.y = gravity;\r\n            // controls\r\n            this.controller = new ControllerManager_1.ControllerManager(this, this.game);\r\n            // sound\r\n            this.soundManager = soundManager;\r\n            game.add.existing(this);\r\n        }\r\n        update() {\r\n            this.body.velocity.x = 0;\r\n            if (!this.dead) {\r\n                if (this.movingRight) {\r\n                    this.moveRight();\r\n                }\r\n                else if (this.movingLeft) {\r\n                    this.moveLeft();\r\n                }\r\n                else {\r\n                    this.animations.frame = 0;\r\n                    this.animations.stop();\r\n                }\r\n                if (this.playingOnDesktop)\r\n                    this.controller.getKeyboardInput(this);\r\n                if (this.jumping) {\r\n                    if (this.hasHangGlider) {\r\n                        if (this.body.velocity.y > 0) {\r\n                            this.body.gravity.y = -this.localGravity / this.hangGliderGravityFactor;\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (this.body.velocity.y > 0) {\r\n                            this.body.gravity.y = this.localGravity;\r\n                        }\r\n                    }\r\n                    if (this.body.blocked.down) {\r\n                        this.soundManager.fall.volume = 0.3;\r\n                        this.soundManager.fall.play();\r\n                        this.jumping = false;\r\n                        this.body.gravity.y = this.localGravity;\r\n                    }\r\n                }\r\n                if (this.y > 450)\r\n                    this.playerDamage(this.soundManager);\r\n                this.checkShield();\r\n                this.checkHangGlider();\r\n                this.applyHangGliderEffects();\r\n            }\r\n            else {\r\n                if (this.fadeComplete)\r\n                    this.playerDamageEffects(this.soundManager);\r\n            }\r\n        }\r\n        updateLightRadius() {\r\n            if (this.lightRadius > this.defaultMinLightRadius)\r\n                this.lightRadius -= 0.2;\r\n        }\r\n        applyHangGliderEffects() {\r\n            if (this.jumping) {\r\n                if (this.hasHangGlider) {\r\n                    this.animations.frame = 8;\r\n                    this.animations.stop();\r\n                    if (this.body.velocity.y > 0) {\r\n                        this.body.gravity.y = -this.localGravity / this.hangGliderGravityFactor;\r\n                    }\r\n                }\r\n                else {\r\n                    this.body.gravity.y = this.localGravity;\r\n                }\r\n            }\r\n            if (this.hasHangGlider) {\r\n                let isGoingUp = this.body.velocity.y < 0;\r\n                if (isGoingUp) {\r\n                    this.body.gravity.y = this.localGravity;\r\n                }\r\n                else {\r\n                    if (!this.body.blocked.down) {\r\n                        this.animations.frame = 8;\r\n                    }\r\n                    this.body.gravity.y = -this.localGravity / this.hangGliderGravityFactor;\r\n                }\r\n            }\r\n            else {\r\n                this.body.gravity.y = this.localGravity;\r\n            }\r\n        }\r\n        removeShield() {\r\n            if (this.shieldSeconds === 0) {\r\n                this.hasShield = false;\r\n                this.shieldSprite.visible = false;\r\n                this.shieldTimer.visible = false;\r\n                this.shieldSeconds = this.shieldMaxTime;\r\n            }\r\n            else {\r\n                this.shieldSeconds--;\r\n                this.shieldTimer.setText(this.shieldSeconds.toString());\r\n            }\r\n        }\r\n        removeHangGlider() {\r\n            if (this.hangGliderSeconds === 0) {\r\n                this.hasHangGlider = false;\r\n                this.hangGliderSprite.visible = false;\r\n                this.hangGliderTimer.visible = false;\r\n                this.hangGliderSeconds = this.hangGliderMaxTime;\r\n                this.hangGliderReference.caught = false;\r\n            }\r\n            else {\r\n                this.hangGliderSeconds--;\r\n                this.hangGliderTimer.setText(this.hangGliderSeconds.toString());\r\n            }\r\n        }\r\n        playerDamage(soundManager) {\r\n            this.soundManager.damage.play();\r\n            this.dead = true;\r\n            this.body.enable = false;\r\n            this.animations.play('damaged');\r\n            this.game.camera.fade(0x00000, 500);\r\n            this.game.camera.onFadeComplete.add(this.fadeCompleted, this);\r\n        }\r\n        checkShield() {\r\n            if (this.hasShield) {\r\n                if (this.shieldSeconds !== this.lastShieldSeconds) {\r\n                    this.lastShieldSeconds = this.shieldSeconds;\r\n                    this.game.world.bringToTop(this.shieldSprite);\r\n                    this.shieldSprite.visible = true;\r\n                    this.shieldTimer.visible = true;\r\n                    this.game.time.events.add(1000, this.removeShield, this);\r\n                }\r\n                else {\r\n                    this.shieldSprite.x = this.x - 1 * this.shieldSprite.scale.x;\r\n                    this.shieldSprite.y = this.y + 10;\r\n                    this.shieldTimer.position.x = this.x + 22;\r\n                    this.shieldTimer.position.y = this.y + 2;\r\n                }\r\n            }\r\n        }\r\n        checkHangGlider() {\r\n            if (this.hasHangGlider) {\r\n                if (this.hangGliderSeconds !== this.lastHangGliderSeconds) {\r\n                    this.lastHangGliderSeconds = this.hangGliderSeconds;\r\n                    this.game.world.bringToTop(this.hangGliderSprite);\r\n                    this.hangGliderSprite.visible = true;\r\n                    this.hangGliderTimer.visible = true;\r\n                    this.hangGliderReference.caught = true;\r\n                    this.game.time.events.add(1000, this.removeHangGlider, this);\r\n                }\r\n                else {\r\n                    this.hangGliderSprite.x = this.x + 10 * this.hangGliderSprite.scale.x;\r\n                    this.hangGliderSprite.y = this.y - 42;\r\n                    this.hangGliderTimer.position.x = this.x + 22;\r\n                    this.hangGliderTimer.position.y = this.y + 10;\r\n                }\r\n            }\r\n        }\r\n        fadeCompleted() {\r\n            this.fadeComplete = true;\r\n        }\r\n        playerDamageEffects(soundManager) {\r\n            this.game.camera.resetFX();\r\n            this.body.enable = true;\r\n            this.lives--;\r\n            this.position.x = this.spawnX;\r\n            this.position.y = this.spawnY;\r\n            this.dead = false;\r\n            this.lightRadius = this.defaultMaxLightRadius;\r\n            if (this.lives < 0) {\r\n                this.soundManager.music.stop();\r\n                this.soundManager.musiclvl3.stop();\r\n                this.soundManager = null;\r\n                this.game.state.start('MainMenu');\r\n            }\r\n            this.fadeComplete = false;\r\n        }\r\n        moveRight() {\r\n            if (this.position.x < this.game.world.bounds.bottomRight.x) {\r\n                if (this.running) {\r\n                    if (!this.hasHangGlider) {\r\n                        this.animations.play('walk').speed = this.animSpeeds[1];\r\n                    }\r\n                    else {\r\n                        if (this.body.blocked.down) {\r\n                            this.animations.play('walk').speed = this.animSpeeds[1];\r\n                        }\r\n                    }\r\n                    this.body.velocity.x = this.speed + this.speedBonus;\r\n                }\r\n                else {\r\n                    if (!this.hasHangGlider) {\r\n                        this.animations.play('walk').speed = this.animSpeeds[0];\r\n                    }\r\n                    else {\r\n                        if (this.body.blocked.down) {\r\n                            this.animations.play('walk').speed = this.animSpeeds[0];\r\n                        }\r\n                    }\r\n                    this.body.velocity.x = this.speed;\r\n                }\r\n                if (this.scale.x == -this.size) {\r\n                    this.scale.x = this.size;\r\n                    this.shieldSprite.scale.x = -2;\r\n                    this.hangGliderSprite.scale.x = 2;\r\n                }\r\n            }\r\n            else {\r\n                this.position.x = this.game.world.bounds.bottomRight.x - 0.1;\r\n            }\r\n        }\r\n        moveLeft() {\r\n            if (this.position.x > 4) {\r\n                if (this.running) {\r\n                    if (!this.hasHangGlider) {\r\n                        this.animations.play('walk').speed = this.animSpeeds[1];\r\n                    }\r\n                    else {\r\n                        if (this.body.blocked.down) {\r\n                            this.animations.play('walk').speed = this.animSpeeds[1];\r\n                        }\r\n                    }\r\n                    this.body.velocity.x = -this.speed - this.speedBonus;\r\n                }\r\n                else {\r\n                    if (!this.hasHangGlider) {\r\n                        this.animations.play('walk').speed = this.animSpeeds[0];\r\n                    }\r\n                    else {\r\n                        if (this.body.blocked.down) {\r\n                            this.animations.play('walk').speed = this.animSpeeds[0];\r\n                        }\r\n                    }\r\n                    this.body.velocity.x = -this.speed;\r\n                }\r\n                if (this.scale.x == this.size) {\r\n                    this.scale.x = -this.size;\r\n                    this.shieldSprite.scale.x = 2;\r\n                    this.hangGliderSprite.scale.x = -2;\r\n                }\r\n            }\r\n            else {\r\n                this.position.x = 4.1;\r\n            }\r\n        }\r\n        jump() {\r\n            if (!this.jumping) {\r\n                if (this.running)\r\n                    if (this.body.velocity.x != 0)\r\n                        this.body.velocity.y = -this.jumpStrength - this.jumpBonus;\r\n                    else\r\n                        this.body.velocity.y = -this.jumpStrength;\r\n                else\r\n                    this.body.velocity.y = -this.jumpStrength;\r\n                this.soundManager.jump.play();\r\n                this.jumping = true;\r\n                this.body.blocked.down = false;\r\n                if (this.movingRight) {\r\n                    this.scale.x = this.size;\r\n                    this.shieldSprite.scale.x = -2;\r\n                    this.hangGliderSprite.scale.x = 2;\r\n                }\r\n                else if (this.movingLeft) {\r\n                    this.scale.x = -this.size;\r\n                    this.shieldSprite.scale.x = 2;\r\n                    this.hangGliderSprite.scale.x = -2;\r\n                }\r\n            }\r\n        }\r\n        fall() {\r\n            if (this.jumping) {\r\n                if (this.body.velocity.y < 0) {\r\n                    if (this.hasHangGlider) {\r\n                        this.body.velocity.y = -this.body.velocity.y / 10;\r\n                    }\r\n                    else {\r\n                        this.body.velocity.y = -this.body.velocity.y / 4;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    exports.Player = Player;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\n\n//# sourceURL=webpack:///./scripts/elements/player/Player.ts?");

/***/ }),

/***/ "./scripts/levels/Level1.ts":
/*!**********************************!*\
  !*** ./scripts/levels/Level1.ts ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../elements/player/Player */ \"./scripts/elements/player/Player.ts\"), __webpack_require__(/*! ./LevelManager */ \"./scripts/levels/LevelManager.ts\"), __webpack_require__(/*! ../managers/Hud */ \"./scripts/managers/Hud.ts\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, Player_1, LevelManager_1, Hud_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    class Level1 extends Phaser.State {\r\n        init(soundManager, previousLevelBase, previousLevelManager, cutscene1) {\r\n            this.soundManager = soundManager;\r\n            this.levelBase = previousLevelBase;\r\n            previousLevelBase = null;\r\n            previousLevelManager = null;\r\n            cutscene1 = null;\r\n        }\r\n        create() {\r\n            this.soundManager.music.volume = this.soundManager.inGameVolume;\r\n            this.levelManager = new LevelManager_1.LevelManager(this.game, this.levelBase, 'Level2', this.soundManager);\r\n            // ---- level genesis\r\n            this.levelManager.createBasicLevelStuff('tileMap_level1');\r\n            // ---- tutorial sprites\r\n            this.arrowKeysSprite = this.game.add.sprite(180, 265, 'arrowkeys');\r\n            this.arrowKeysSprite.scale.setTo(3);\r\n            this.arrowKeysSprite.alpha = 0;\r\n            this.shiftSprite = this.game.add.sprite(1650, 265, 'shift');\r\n            this.shiftSprite.scale.setTo(2.5);\r\n            this.shiftSprite.alpha = 0;\r\n            this.glowSpriteB = this.game.add.sprite(180, 265, 'buttonglow');\r\n            this.glowSpriteB.anchor.setTo(0.5, 0.5);\r\n            this.glowSpriteB.alpha = 0;\r\n            this.glowSpriteA = this.game.add.sprite(180, 265, 'buttonglow');\r\n            this.glowSpriteA.anchor.setTo(0.5, 0.5);\r\n            this.glowSpriteA.alpha = 0;\r\n            // ---- player\r\n            this.player = new Player_1.Player(this.game, 10, 300, 150, this.game.physics.arcade.gravity.y, 0, 0, 3, this.soundManager);\r\n            this.game.camera.follow(this.player);\r\n            // ---- set button glow position\r\n            if (!this.game.device.desktop) {\r\n                this.glowSpriteB.position.set(this.player.controller.buttonjump.x, this.player.controller.buttonjump.y);\r\n                this.glowSpriteA.position.set(this.player.controller.buttonfire.x, this.player.controller.buttonfire.y);\r\n                this.glowSpriteB.fixedToCamera = true;\r\n                this.glowSpriteA.fixedToCamera = true;\r\n            }\r\n            // ---- hud and game\r\n            this.hud = new Hud_1.Hud(this.game, this.player);\r\n            this.game.world.bringToTop(this.hud);\r\n        }\r\n        update() {\r\n            if (this.game.device.desktop)\r\n                this.showDesktopButtons();\r\n            else\r\n                this.showMobileButtons();\r\n            this.levelManager.updateBasicLevelStuff(this.player);\r\n        }\r\n        showDesktopButtons() {\r\n            if (this.checkProximityFirstTutorial())\r\n                this.game.add.tween(this.arrowKeysSprite).to({ alpha: 1 }, 300, Phaser.Easing.Linear.None, true, 0, 0, true);\r\n            else\r\n                this.game.add.tween(this.arrowKeysSprite).to({ alpha: 0 }, 300, Phaser.Easing.Linear.None, true, 0, 0, true);\r\n            if (this.checkProximitySecondTutorial())\r\n                this.game.add.tween(this.shiftSprite).to({ alpha: 1 }, 300, Phaser.Easing.Linear.None, true, 0, 0, true);\r\n            else\r\n                this.game.add.tween(this.shiftSprite).to({ alpha: 0 }, 300, Phaser.Easing.Linear.None, true, 0, 0, true);\r\n        }\r\n        showMobileButtons() {\r\n            if (this.checkProximityFirstTutorial()) {\r\n                this.game.add.tween(this.player.controller.buttonjump.scale).to({ x: 1.2, y: 1.2 }, 300, Phaser.Easing.Linear.None, true, 0, 0, true);\r\n                this.game.add.tween(this.glowSpriteB).to({ alpha: 1 }, 300, Phaser.Easing.Linear.None, true, 0, 0, true);\r\n                this.game.add.tween(this.glowSpriteB.scale).to({ x: 1.2, y: 1.2 }, 300, Phaser.Easing.Linear.None, true, 0, 0, true);\r\n            }\r\n            else {\r\n                this.game.add.tween(this.player.controller.buttonjump.scale).to({ x: 1, y: 1 }, 300, Phaser.Easing.Linear.None, true, 0, 0, true);\r\n                this.game.add.tween(this.glowSpriteB).to({ alpha: 0 }, 300, Phaser.Easing.Linear.None, true, 0, 0, true);\r\n                this.game.add.tween(this.glowSpriteB.scale).to({ x: 1, y: 1 }, 300, Phaser.Easing.Linear.None, true, 0, 0, true);\r\n            }\r\n            if (this.checkProximitySecondTutorial()) {\r\n                this.game.add.tween(this.player.controller.buttonfire.scale).to({ x: 1.2, y: 1.2 }, 300, Phaser.Easing.Linear.None, true, 0, 0, true);\r\n                this.game.add.tween(this.glowSpriteA).to({ alpha: 1 }, 300, Phaser.Easing.Linear.None, true, 0, 0, true);\r\n                this.game.add.tween(this.glowSpriteA.scale).to({ x: 1.2, y: 1.2 }, 300, Phaser.Easing.Linear.None, true, 0, 0, true);\r\n            }\r\n            else {\r\n                this.game.add.tween(this.player.controller.buttonfire.scale).to({ x: 1, y: 1 }, 300, Phaser.Easing.Linear.None, true, 0, 0, true);\r\n                this.game.add.tween(this.glowSpriteA).to({ alpha: 0 }, 300, Phaser.Easing.Linear.None, true, 0, 0, true);\r\n                this.game.add.tween(this.glowSpriteA.scale).to({ x: 1, y: 1 }, 300, Phaser.Easing.Linear.None, true, 0, 0, true);\r\n            }\r\n        }\r\n        checkProximityFirstTutorial() {\r\n            return (this.player.x > this.arrowKeysSprite.x - 120 && this.player.x < this.arrowKeysSprite.x + 100);\r\n        }\r\n        checkProximitySecondTutorial() {\r\n            return (this.player.x > this.shiftSprite.x - 100 && this.player.x < this.shiftSprite.x + 170);\r\n        }\r\n    }\r\n    exports.Level1 = Level1;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\n\n//# sourceURL=webpack:///./scripts/levels/Level1.ts?");

/***/ }),

/***/ "./scripts/levels/Level2.ts":
/*!**********************************!*\
  !*** ./scripts/levels/Level2.ts ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../elements/player/Player */ \"./scripts/elements/player/Player.ts\"), __webpack_require__(/*! ./LevelManager */ \"./scripts/levels/LevelManager.ts\"), __webpack_require__(/*! ../managers/Hud */ \"./scripts/managers/Hud.ts\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, Player_1, LevelManager_1, Hud_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    class Level2 extends Phaser.State {\r\n        init(player, soundManager, previousLevelBase, previousLevelManager) {\r\n            this.lastPlayer = player;\r\n            this.soundManager = soundManager;\r\n            this.levelBase = previousLevelBase;\r\n            player.destroy();\r\n            previousLevelBase = null;\r\n            previousLevelManager = null;\r\n        }\r\n        create() {\r\n            this.levelManager = new LevelManager_1.LevelManager(this.game, this.levelBase, 'Level3', this.soundManager);\r\n            // ---- level genesis\r\n            this.levelManager.createBasicLevelStuff('tileMap_level2');\r\n            // ---- player\r\n            this.player = new Player_1.Player(this.game, 10, 300, 150, this.game.physics.arcade.gravity.y, this.lastPlayer.gems, this.lastPlayer.redGems, this.lastPlayer.lives, this.soundManager);\r\n            this.game.camera.follow(this.player);\r\n            // ---- hud and game\r\n            this.hud = new Hud_1.Hud(this.game, this.player);\r\n            this.game.world.bringToTop(this.hud);\r\n        }\r\n        update() {\r\n            this.levelManager.updateBasicLevelStuff(this.player);\r\n        }\r\n    }\r\n    exports.Level2 = Level2;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\n\n//# sourceURL=webpack:///./scripts/levels/Level2.ts?");

/***/ }),

/***/ "./scripts/levels/Level3.ts":
/*!**********************************!*\
  !*** ./scripts/levels/Level3.ts ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../elements/player/Player */ \"./scripts/elements/player/Player.ts\"), __webpack_require__(/*! ./LevelManager */ \"./scripts/levels/LevelManager.ts\"), __webpack_require__(/*! ../managers/Hud */ \"./scripts/managers/Hud.ts\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, Player_1, LevelManager_1, Hud_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    class Level3 extends Phaser.State {\r\n        init(player, soundManager, previousLevelBase, previousLevelManager) {\r\n            this.lastPlayer = player;\r\n            this.soundManager = soundManager;\r\n            this.levelBase = previousLevelBase;\r\n            player.destroy();\r\n            previousLevelBase = null;\r\n            previousLevelManager = null;\r\n        }\r\n        create() {\r\n            this.levelManager = new LevelManager_1.LevelManager(this.game, this.levelBase, 'Level4', this.soundManager);\r\n            // ---- custom lvl 3 music\r\n            if (!this.soundManager.musicMuted) {\r\n                this.soundManager.music.stop();\r\n                this.soundManager.musiclvl3.loop = true;\r\n                this.soundManager.musiclvl3.play();\r\n                this.soundManager.musiclvl3.volume = this.soundManager.inGameVolume;\r\n            }\r\n            // ---- level genesis (without parallax, so must set each one)\r\n            this.levelManager.createMap('tileMap_level3');\r\n            this.game.world.bringToTop(this.levelManager.level.back);\r\n            this.game.world.bringToTop(this.levelManager.level.walls);\r\n            this.levelManager.createGreenEnemies();\r\n            this.levelManager.createItems();\r\n            this.levelManager.createGems();\r\n            this.levelManager.createRedGems();\r\n            // ---- player\r\n            this.player = new Player_1.Player(this.game, 80, 50, 150, this.game.physics.arcade.gravity.y, this.lastPlayer.gems, this.lastPlayer.redGems, this.lastPlayer.lives, this.soundManager);\r\n            this.game.camera.follow(this.player);\r\n            // ---- bats\r\n            this.levelManager.createBats(this.player);\r\n            // shadow setup\r\n            this.shadowTexture = this.game.add.bitmapData(this.game.width + 100, this.game.height + 100);\r\n            this.lightSprite = this.game.add.image(this.game.camera.x, this.game.camera.y, this.shadowTexture);\r\n            this.lightSprite.blendMode = Phaser.blendModes.MULTIPLY;\r\n            // light item (after shadow to make it bright)\r\n            this.levelManager.createLights();\r\n            // ---- hud and game\r\n            this.hud = new Hud_1.Hud(this.game, this.player);\r\n            this.game.world.bringToTop(this.hud);\r\n        }\r\n        update() {\r\n            this.updateShadowTexture();\r\n            this.levelManager.updatePlayer(this.player);\r\n            this.levelManager.updateRedGemsInteraction(this.player);\r\n            this.levelManager.updateGemsInteraction(this.player);\r\n            this.levelManager.updateEnemiesInteraction(this.player);\r\n            this.levelManager.updateItemsInteraction(this.player);\r\n            this.levelManager.updateBatsInteraction(this.player);\r\n            this.player.updateLightRadius();\r\n        }\r\n        updateShadowTexture() {\r\n            this.lightSprite.reset(this.game.camera.x, this.game.camera.y);\r\n            this.shadowTexture.clear();\r\n            this.shadowTexture.context.fillStyle = 'rgb(10, 10, 10, 0.85)';\r\n            this.shadowTexture.context.fillRect(-25, -25, this.game.width + 100, this.game.height + 100);\r\n            let radius = this.player.lightRadius + this.game.rnd.integerInRange(1, (this.player.lightRadius * 0.13)), torchX = this.player.position.x - this.game.camera.x, torchY = this.player.position.y + 15 - this.game.camera.y;\r\n            let gradient = this.shadowTexture.context.createRadialGradient(torchX, torchY, (this.player.lightRadius * 0.66) * 0.75, torchX, torchY, radius);\r\n            gradient.addColorStop(0, 'rgba(255, 255, 255, 1.0)');\r\n            gradient.addColorStop(1, 'rgba(255, 255, 255, 0.0)');\r\n            this.shadowTexture.context.beginPath();\r\n            this.shadowTexture.context.fillStyle = gradient;\r\n            this.shadowTexture.context.arc(torchX, torchY, radius, 0, Math.PI * 2, false);\r\n            this.shadowTexture.context.fill();\r\n            this.shadowTexture.dirty = true;\r\n        }\r\n    }\r\n    exports.Level3 = Level3;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\n\n//# sourceURL=webpack:///./scripts/levels/Level3.ts?");

/***/ }),

/***/ "./scripts/levels/Level4.ts":
/*!**********************************!*\
  !*** ./scripts/levels/Level4.ts ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../elements/player/Player */ \"./scripts/elements/player/Player.ts\"), __webpack_require__(/*! ./LevelManager */ \"./scripts/levels/LevelManager.ts\"), __webpack_require__(/*! ../managers/Hud */ \"./scripts/managers/Hud.ts\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, Player_1, LevelManager_1, Hud_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    class Level4 extends Phaser.State {\r\n        init(player, soundManager, previousLevelBase, previousLevelManager) {\r\n            this.lastPlayer = player;\r\n            this.soundManager = soundManager;\r\n            this.levelBase = previousLevelBase;\r\n            player.destroy();\r\n            previousLevelBase = null;\r\n            previousLevelManager = null;\r\n        }\r\n        create() {\r\n            this.levelManager = new LevelManager_1.LevelManager(this.game, this.levelBase, 'CutsceneDemoFinal', this.soundManager);\r\n            // ---- back to regular music\r\n            if (!this.soundManager.musicMuted) {\r\n                this.soundManager.musiclvl3.stop();\r\n                this.soundManager.music.loop = true;\r\n                this.soundManager.music.play();\r\n            }\r\n            // ---- level genesis\r\n            this.levelManager.createBasicLevelStuff('tileMap_level4');\r\n            // ---- player\r\n            this.player = new Player_1.Player(this.game, 100, 200, 150, this.game.physics.arcade.gravity.y, this.lastPlayer.gems, this.lastPlayer.redGems, this.lastPlayer.lives, this.soundManager);\r\n            this.game.camera.follow(this.player);\r\n            // ---- hud and game\r\n            this.hud = new Hud_1.Hud(this.game, this.player);\r\n            this.game.world.bringToTop(this.hud);\r\n        }\r\n        update() {\r\n            this.levelManager.updateBasicLevelStuff(this.player);\r\n        }\r\n    }\r\n    exports.Level4 = Level4;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\n\n//# sourceURL=webpack:///./scripts/levels/Level4.ts?");

/***/ }),

/***/ "./scripts/levels/LevelBase.ts":
/*!*************************************!*\
  !*** ./scripts/levels/LevelBase.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    class LevelBase {\r\n        constructor() {\r\n            this.bats = [];\r\n            this.enemies = [];\r\n            this.platforms = [];\r\n            this.levers = [];\r\n            this.items = [];\r\n            this.enemySpeed = 100;\r\n        }\r\n    }\r\n    exports.LevelBase = LevelBase;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\n\n//# sourceURL=webpack:///./scripts/levels/LevelBase.ts?");

/***/ }),

/***/ "./scripts/levels/LevelManager.ts":
/*!****************************************!*\
  !*** ./scripts/levels/LevelManager.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../elements/enemies/Enemy */ \"./scripts/elements/enemies/Enemy.ts\"), __webpack_require__(/*! ../elements/enemies/Bat */ \"./scripts/elements/enemies/Bat.ts\"), __webpack_require__(/*! ../elements/items/Shield */ \"./scripts/elements/items/Shield.ts\"), __webpack_require__(/*! ../elements/objects/Platform */ \"./scripts/elements/objects/Platform.ts\"), __webpack_require__(/*! ../elements/objects/Lever */ \"./scripts/elements/objects/Lever.ts\"), __webpack_require__(/*! ../elements/objects/Gate */ \"./scripts/elements/objects/Gate.ts\"), __webpack_require__(/*! ../elements/items/Light */ \"./scripts/elements/items/Light.ts\"), __webpack_require__(/*! ../elements/items/HangGlider */ \"./scripts/elements/items/HangGlider.ts\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, Enemy_1, Bat_1, Shield_1, Platform_1, Lever_1, Gate_1, Light_1, HangGlider_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    class LevelManager {\r\n        constructor(game, level, nextLevel, soundManager) {\r\n            this.game = game;\r\n            this.level = level;\r\n            this.nextLevel = nextLevel;\r\n            this.level.lastCameraPositionX = 0;\r\n            this.soundManager = soundManager;\r\n        }\r\n        createBasicLevelStuff(jsonTilemap) {\r\n            this.createMap(jsonTilemap);\r\n            this.createParallax(430);\r\n            this.game.world.bringToTop(this.level.back);\r\n            this.game.world.bringToTop(this.level.walls);\r\n            this.createGreenEnemies();\r\n            this.createGems();\r\n            this.createRedGems();\r\n            this.createItems();\r\n            this.createMisc();\r\n        }\r\n        updateBasicLevelStuff(player) {\r\n            this.updatePlayer(player);\r\n            this.updateRedGemsInteraction(player);\r\n            this.updateGemsInteraction(player);\r\n            this.updateEnemiesInteraction(player);\r\n            this.updateItemsInteraction(player);\r\n            this.updateMiscInteraction(player);\r\n            this.updateParallax(player.speed);\r\n        }\r\n        createMap(jsonTilemap) {\r\n            this.level.map = this.game.add.tilemap(jsonTilemap);\r\n            this.level.map.addTilesetImage('jungletileset', 'jungle_tileset');\r\n            this.level.map.setCollisionBetween(1, 2000, true, 'walls');\r\n            this.level.back = this.level.map.createLayer('back');\r\n            this.level.back.setScale(2);\r\n            this.level.walls = this.level.map.createLayer('walls');\r\n            this.level.walls.setScale(2);\r\n            this.level.walls.resizeWorld();\r\n        }\r\n        createParallax(compensationHeight) {\r\n            this.level.paralax2 = this.game.add.tileSprite(0, this.game.world.height - compensationHeight, this.game.world.width, this.game.world.height + 100, 'jungle_paralax2');\r\n            this.level.paralax2.tileScale.x = 2;\r\n            this.level.paralax2.tileScale.y = 2;\r\n            this.level.paralax3 = this.game.add.tileSprite(0, this.game.world.height - compensationHeight - 5, this.game.world.width, this.game.world.height + 100, 'jungle_paralax3');\r\n            this.level.paralax3.tileScale.x = 2;\r\n            this.level.paralax3.tileScale.y = 2;\r\n            this.level.paralax4 = this.game.add.tileSprite(0, this.game.world.height - compensationHeight - 20, this.game.world.width, this.game.world.height + 100, 'jungle_paralax4');\r\n            this.level.paralax4.tileScale.x = 2;\r\n            this.level.paralax4.tileScale.y = 2;\r\n            this.level.paralax5 = this.game.add.tileSprite(0, this.game.world.height - compensationHeight - 30, this.game.world.width, this.game.world.height + 100, 'jungle_paralax5');\r\n            this.level.paralax5.tileScale.x = 2;\r\n            this.level.paralax5.tileScale.y = 2;\r\n            this.level.paralax5.checkWorldBounds = true;\r\n        }\r\n        createGreenEnemies() {\r\n            this.level.map.objects.enemies.forEach((data) => {\r\n                this.level.enemies.push(new Enemy_1.Enemy(this.game, data.x * 2, data.y * 1.7, this.game.physics.arcade.gravity.y, this.level.enemySpeed));\r\n            });\r\n        }\r\n        createItems() {\r\n            this.level.map.objects.items.forEach((data) => {\r\n                if (data.name == 'shield') {\r\n                    this.level.items.push(new Shield_1.Shield(this.game, data.x * 2, data.y * 1.7, this.game.physics.arcade.gravity.y));\r\n                }\r\n                if (data.name == 'hangglider') {\r\n                    this.level.items.push(new HangGlider_1.HangGlider(this.game, data.x * 2, data.y * 1.5, this.game.physics.arcade.gravity.y));\r\n                }\r\n            });\r\n        }\r\n        createLights() {\r\n            this.level.map.objects.items.forEach((data) => {\r\n                if (data.name == 'light') {\r\n                    this.level.items.push(new Light_1.Light(this.game, data.x * 2, data.y * 1.7, this.game.physics.arcade.gravity.y));\r\n                }\r\n            });\r\n        }\r\n        createBats(player) {\r\n            this.playerRef = player;\r\n            this.level.map.objects.bats.forEach((data) => {\r\n                this.level.bats.push(new Bat_1.Bat(this.game, data.x * 2, data.y * 1.5, this.game.physics.arcade.gravity.y, 125, this.playerRef));\r\n            });\r\n        }\r\n        createGems() {\r\n            this.level.gems = this.game.add.physicsGroup();\r\n            this.level.map.createFromObjects('gems', 'gem1', 'greygem', 0, true, false, this.level.gems);\r\n            this.level.gems.forEach((gem) => {\r\n                gem = this.gemSetup(gem);\r\n            });\r\n        }\r\n        createRedGems() {\r\n            this.level.redGems = this.game.add.physicsGroup();\r\n            this.level.map.createFromObjects('redgems', 'redgem', 'redgem', 0, true, false, this.level.redGems);\r\n            this.level.redGems.forEach((gem) => {\r\n                gem = this.gemSetup(gem);\r\n            });\r\n        }\r\n        createMisc() {\r\n            this.level.misc = this.game.add.physicsGroup();\r\n            this.level.map.createFromObjects('misc', 'lumpofgrass', 'lumpofgrass', 0, true, false, this.level.misc);\r\n            this.level.misc.forEach((misc) => {\r\n                if (misc.name == 'lumpofgrass') {\r\n                    misc = this.miscSetup(misc);\r\n                }\r\n            });\r\n            this.level.map.objects.misc.forEach((data) => {\r\n                if (data.name == 'platform') {\r\n                    this.level.platforms.push(new Platform_1.Platform(this.game, data.x * 2, data.y * 1.9, this.game.physics.arcade.gravity.y, this.soundManager));\r\n                }\r\n                if (data.name == 'lever') {\r\n                    this.level.levers.push(new Lever_1.Lever(this.game, data.x * 2.01, data.y * 1.9, this.game.physics.arcade.gravity.y, this.soundManager));\r\n                }\r\n            });\r\n            var totalActivables = this.level.levers.length + this.level.platforms.length;\r\n            this.level.map.objects.misc.forEach((data) => {\r\n                if (data.name == 'gate') {\r\n                    this.level.gate = new Gate_1.Gate(this.game, data.x * 2, data.y * 1.45, totalActivables, this.game.physics.arcade.gravity.y, this.soundManager);\r\n                }\r\n            });\r\n        }\r\n        updatePlayer(player) {\r\n            this.game.physics.arcade.collide(player, this.level.walls);\r\n            if (player.position.x + 0.1 >= this.game.world.bounds.bottomRight.x)\r\n                this.goNextLevel(player);\r\n        }\r\n        updateParallax(playerSpeed) {\r\n            if (this.game.input.keyboard.isDown(Phaser.Keyboard.LEFT)) {\r\n                if (this.game.camera.position.x != this.level.lastCameraPositionX) {\r\n                    this.level.paralax4.tilePosition.x += playerSpeed / 1875;\r\n                    this.level.paralax3.tilePosition.x += playerSpeed / 6000;\r\n                    this.level.paralax2.tilePosition.x += playerSpeed / 30000;\r\n                }\r\n            }\r\n            if (this.game.input.keyboard.isDown(Phaser.Keyboard.RIGHT)) {\r\n                if (this.game.camera.position.x != this.level.lastCameraPositionX) {\r\n                    this.level.paralax4.tilePosition.x -= playerSpeed / 1875;\r\n                    this.level.paralax3.tilePosition.x -= playerSpeed / 6000;\r\n                    this.level.paralax2.tilePosition.x -= playerSpeed / 30000;\r\n                }\r\n            }\r\n            this.level.lastCameraPositionX = this.game.camera.position.x;\r\n        }\r\n        updateEnemiesInteraction(player) {\r\n            this.game.physics.arcade.collide(this.level.enemies, this.level.walls);\r\n            this.game.physics.arcade.overlap(player, this.level.enemies, this.enemyOverlap.bind(this));\r\n        }\r\n        updateItemsInteraction(player) {\r\n            this.game.physics.arcade.collide(this.level.items, this.level.walls);\r\n            this.game.physics.arcade.overlap(player, this.level.items, this.getItem.bind(this));\r\n        }\r\n        updateGateInteraction(player) {\r\n            this.game.physics.arcade.collide(this.level.gate, this.level.walls);\r\n            this.game.physics.arcade.collide(this.level.gate, this.level.enemies, this.enemyGateCollide.bind(this));\r\n            if (this.level.gate.visible) {\r\n                this.game.physics.arcade.collide(player, this.level.gate);\r\n            }\r\n            var actives = 0;\r\n            this.level.platforms.forEach(platform => {\r\n                if (platform.active)\r\n                    actives++;\r\n            });\r\n            this.level.levers.forEach(lever => {\r\n                if (lever.active)\r\n                    actives++;\r\n            });\r\n            this.level.gate.activated = actives;\r\n        }\r\n        updateMiscInteraction(player) {\r\n            this.game.physics.arcade.collide(this.level.misc, this.level.walls);\r\n            this.game.physics.arcade.collide(player, this.level.misc, this.miscOverlap.bind(this));\r\n            var activables = this.level.platforms.length > 0 || this.level.levers.length > 0;\r\n            if (this.level.platforms.length > 0) {\r\n                this.game.physics.arcade.collide(this.level.platforms, this.level.walls);\r\n                this.game.physics.arcade.overlap(player, this.level.platforms, this.platformOverlap.bind(this));\r\n                this.game.physics.arcade.overlap(this.level.platforms, this.level.misc, this.platformOverlap.bind(this));\r\n            }\r\n            if (this.level.levers.length > 0) {\r\n                this.game.physics.arcade.collide(this.level.levers, this.level.walls);\r\n                this.game.physics.arcade.overlap(player, this.level.levers, this.leverOverlap.bind(this));\r\n            }\r\n            if (activables && this.level.gate)\r\n                this.updateGateInteraction(player);\r\n            this.level.misc.forEach((misc) => {\r\n                if (misc.body.touching.none) {\r\n                    if (!misc.inCamera) {\r\n                        misc.x = misc.spawnX;\r\n                        misc.y = misc.spawnY;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        updateBatsInteraction(player) {\r\n            this.game.physics.arcade.collide(this.level.bats, this.level.walls);\r\n            this.game.physics.arcade.overlap(player, this.level.bats, this.enemyOverlap.bind(this));\r\n        }\r\n        updateGemsInteraction(player) {\r\n            this.game.physics.arcade.collide(this.level.gems, this.level.walls);\r\n            this.game.physics.arcade.overlap(player, this.level.gems, this.gemsCollect.bind(this), null, this);\r\n        }\r\n        updateRedGemsInteraction(player) {\r\n            this.game.physics.arcade.collide(this.level.redGems, this.level.walls);\r\n            this.game.physics.arcade.overlap(player, this.level.redGems, this.redGemsCollect.bind(this), null, this);\r\n        }\r\n        enemyOverlap(player, enemy) {\r\n            if (player.body.touching.down) {\r\n                if ((player.position.y) < (enemy.position.y - (enemy.height - 5))) {\r\n                    this.soundManager.enemydamage.play();\r\n                    enemy.body.enable = false;\r\n                    player.jumping = false;\r\n                    if (player.pressingUp) {\r\n                        player.body.velocity.y = -player.jumpStrength - player.jumpBonus - 2;\r\n                    }\r\n                    else {\r\n                        player.body.velocity.y = -player.jumpStrength / 2;\r\n                    }\r\n                    enemy.destroy();\r\n                }\r\n                else {\r\n                    if (!player.hasShield)\r\n                        player.playerDamage(this.soundManager);\r\n                }\r\n            }\r\n            else {\r\n                if (!player.hasShield)\r\n                    player.playerDamage(this.soundManager);\r\n            }\r\n        }\r\n        enemyGateCollide(gate, enemy) {\r\n            if (enemy.movingRight) {\r\n                enemy.movingRight = false;\r\n                enemy.movingLeft = true;\r\n            }\r\n            else {\r\n                enemy.movingRight = true;\r\n                enemy.movingLeft = false;\r\n            }\r\n        }\r\n        miscOverlap(player, misc) {\r\n            if ((player.position.y) < (misc.position.y - (misc.height - 28)))\r\n                player.body.blocked.down = true;\r\n        }\r\n        platformOverlap(misc, platform) {\r\n            misc.body.touching.none = false;\r\n            platform.body.touching.none = false;\r\n        }\r\n        leverOverlap(player, lever) {\r\n            lever.body.touching.none = false;\r\n            lever.toggle();\r\n        }\r\n        getItem(player, item) {\r\n            if (item.name == 'shield') {\r\n                player.hasShield = true;\r\n            }\r\n            if (item.name == 'light') {\r\n                player.lightRadius = player.defaultMaxLightRadius;\r\n            }\r\n            if (item.name == 'hangglider') {\r\n                player.hangGliderReference = item;\r\n                player.hasHangGlider = true;\r\n            }\r\n            if (!item.respawns) {\r\n                item.destroy();\r\n            }\r\n        }\r\n        gemSetup(gem) {\r\n            gem.x = gem.x * 2;\r\n            gem.y = gem.y * 1.7;\r\n            gem.scale.setTo(1.8, 2);\r\n            gem.body.immovable = true;\r\n            gem.body.bounce.y = 0.3;\r\n            gem.animations.add('shine', [0, 1, 2, 3], 8, true);\r\n            gem.animations.play('shine');\r\n            return gem;\r\n        }\r\n        miscSetup(misc) {\r\n            if (misc.name == 'lumpofgrass') {\r\n                misc.x = misc.x * 2;\r\n                misc.y = misc.y * 1.7;\r\n                misc.spawnX = misc.x;\r\n                misc.spawnY = misc.y;\r\n                misc.scale.setTo(2, 2);\r\n                misc.body.immovable = false;\r\n                misc.body.bounce.y = 0;\r\n                misc.body.drag.x = 200;\r\n                misc.body.drag.y = -200;\r\n                misc.body.setSize(32, 30, 0, 0);\r\n            }\r\n            return misc;\r\n        }\r\n        gemsCollect(player, gem) {\r\n            this.soundManager.gemcatch.play();\r\n            player.gems++;\r\n            gem.destroy();\r\n        }\r\n        redGemsCollect(player, gem) {\r\n            this.soundManager.redgemcatch.play();\r\n            player.redGems++;\r\n            gem.destroy();\r\n        }\r\n        setGarbage() {\r\n            this.level.enemies.splice(0);\r\n            this.level.map = null;\r\n            this.level.walls = null;\r\n            this.level.paralax1 = null;\r\n            this.level.paralax2 = null;\r\n            this.level.paralax3 = null;\r\n            this.level.paralax4 = null;\r\n            this.level.paralax5 = null;\r\n        }\r\n        goNextLevel(player) {\r\n            this.level.enemies.forEach((enemy) => {\r\n                enemy.destroy();\r\n            });\r\n            this.setGarbage();\r\n            this.game.state.start(this.nextLevel, true, false, player, this.soundManager, this.level, this);\r\n        }\r\n    }\r\n    exports.LevelManager = LevelManager;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\n\n//# sourceURL=webpack:///./scripts/levels/LevelManager.ts?");

/***/ }),

/***/ "./scripts/managers/ControllerManager.ts":
/*!***********************************************!*\
  !*** ./scripts/managers/ControllerManager.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    class ControllerManager {\r\n        constructor(player, game) {\r\n            this.game = game;\r\n            if (!this.game.device.desktop)\r\n                this.getVirtualButtonsInput(player);\r\n        }\r\n        getKeyboardInput(player) {\r\n            if (this.game.input.keyboard.isDown(Phaser.Keyboard.SHIFT))\r\n                player.running = true;\r\n            else\r\n                player.running = false;\r\n            if (this.game.input.keyboard.isDown(Phaser.Keyboard.LEFT))\r\n                player.movingLeft = true;\r\n            else\r\n                player.movingLeft = false;\r\n            if (this.game.input.keyboard.isDown(Phaser.Keyboard.RIGHT))\r\n                player.movingRight = true;\r\n            else\r\n                player.movingRight = false;\r\n            if (this.game.input.keyboard.isDown(Phaser.Keyboard.UP)) {\r\n                player.pressingUp = true;\r\n                if (player.body.blocked.down)\r\n                    player.jump();\r\n            }\r\n            else {\r\n                player.pressingUp = false;\r\n            }\r\n            if (!this.game.input.keyboard.isDown(Phaser.Keyboard.UP))\r\n                if (!player.body.blocked.down)\r\n                    player.fall();\r\n        }\r\n        getVirtualButtonsInput(player) {\r\n            this.buttonjump = this.game.add.button(635, 355, 'buttonjump', null, this, 0, 1, 0, 1);\r\n            this.buttonjump.fixedToCamera = true;\r\n            this.buttonjump.events.onInputDown.add(function () { player.pressingUp = true; if (player.body.blocked.down)\r\n                player.jump(); });\r\n            this.buttonjump.events.onInputUp.add(function () { player.pressingUp = false; if (!player.body.blocked.down)\r\n                player.fall(); });\r\n            this.buttonjump.anchor.setTo(0.5, 0.5);\r\n            this.buttonfire = this.game.add.button(748, 355, 'buttonfire', null, this, 0, 1, 0, 1);\r\n            this.buttonfire.fixedToCamera = true;\r\n            this.buttonfire.events.onInputDown.add(() => {\r\n                player.running = !player.running;\r\n                if (player.running) {\r\n                    this.buttonfire.setFrames(1, 0, 1, 0);\r\n                }\r\n                else {\r\n                    this.buttonfire.setFrames(0, 1, 0, 1);\r\n                }\r\n            });\r\n            this.buttonfire.anchor.setTo(0.5, 0.5);\r\n            this.buttonleft = this.game.add.button(0, 310, 'buttonleft', null, this, 0, 1, 0, 1);\r\n            this.buttonleft.fixedToCamera = true;\r\n            this.buttonleft.events.onInputDown.add(function () { player.movingLeft = true; });\r\n            this.buttonleft.events.onInputUp.add(function () { player.movingLeft = false; });\r\n            this.buttonright = this.game.add.button(160, 310, 'buttonright', null, this, 0, 1, 0, 1);\r\n            this.buttonright.fixedToCamera = true;\r\n            this.buttonright.events.onInputDown.add(function () { player.movingRight = true; });\r\n            this.buttonright.events.onInputUp.add(function () { player.movingRight = false; });\r\n        }\r\n    }\r\n    exports.ControllerManager = ControllerManager;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\n\n//# sourceURL=webpack:///./scripts/managers/ControllerManager.ts?");

/***/ }),

/***/ "./scripts/managers/Hud.ts":
/*!*********************************!*\
  !*** ./scripts/managers/Hud.ts ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    class Hud extends Phaser.Sprite {\r\n        constructor(game, player) {\r\n            super(game, 0, 0, 'hud', 0);\r\n            this.hearts = [];\r\n            this.gemsFontSize = 16;\r\n            this.redGemsFontSize = 16;\r\n            this.fixedToCamera = true;\r\n            this.player = player;\r\n            this.lives = player.lives;\r\n            this.adjustFontSize();\r\n            this.hudGemsText = game.add.bitmapText(672, 29, 'carrier_command', this.player.gems.toString(), this.gemsFontSize);\r\n            this.hudRedGemsText = game.add.bitmapText(572, 29, 'carrier_command', this.player.redGems.toString(), this.redGemsFontSize);\r\n            this.addChild(this.hudGemsText);\r\n            this.addChild(this.hudRedGemsText);\r\n            this.fillLives();\r\n            game.add.existing(this);\r\n        }\r\n        update() {\r\n            this.hudGemsText.setText(this.player.gems.toString());\r\n            this.hudRedGemsText.setText(this.player.redGems.toString());\r\n            this.adjustFontSize();\r\n            if (this.lives != this.player.lives) {\r\n                this.lives = this.player.lives;\r\n                this.fillLives();\r\n            }\r\n        }\r\n        fillLives() {\r\n            this.hearts.forEach(function (heart) {\r\n                heart.destroy();\r\n            });\r\n            this.hearts = [];\r\n            for (var i = 0; i < this.lives; i++)\r\n                this.hearts.push(this.game.add.sprite(35 * i + 30, 23, 'heart2'));\r\n            this.hearts.forEach(function (heart) {\r\n                heart.fixedToCamera = true;\r\n            });\r\n        }\r\n        adjustFontSize() {\r\n            if (this.player.gems >= 100) {\r\n                this.gemsFontSize = 12;\r\n                this.hudGemsText.fontSize = 12;\r\n            }\r\n            if (this.player.redGems >= 100) {\r\n                this.redGemsFontSize = 12;\r\n                this.hudRedGemsText.fontSize = 12;\r\n            }\r\n        }\r\n    }\r\n    exports.Hud = Hud;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\n\n//# sourceURL=webpack:///./scripts/managers/Hud.ts?");

/***/ }),

/***/ "./scripts/managers/SoundManager.ts":
/*!******************************************!*\
  !*** ./scripts/managers/SoundManager.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    class SoundManager {\r\n        constructor(game) {\r\n            this.loaded = false;\r\n            this.musicMuted = false;\r\n            this.inGameVolume = 0.1;\r\n            this.game = game;\r\n            this.gemcatch = this.game.add.audio('coincatch');\r\n            this.redgemcatch = this.game.add.audio('redcoincatch');\r\n            this.damage = this.game.add.audio('damage');\r\n            this.enemydamage = this.game.add.audio('enemydamage');\r\n            this.fall = this.game.add.audio('fall');\r\n            this.jump = this.game.add.audio('jump');\r\n            this.clickin = this.game.add.audio('clickin');\r\n            this.clickout = this.game.add.audio('clickout');\r\n            this.leverpull = this.game.add.audio('leverpull');\r\n            this.gateopen = this.game.add.audio('gateopen');\r\n            this.gateclose = this.game.add.audio('gateclose');\r\n            this.music = this.game.add.audio('bgmusic');\r\n            this.musiclvl3 = this.game.add.audio('bgmusiclvl3');\r\n            this.musicdemofinal = this.game.add.audio('bgdemofinal');\r\n            this.game.sound.setDecodedCallback([this.gemcatch, this.redgemcatch,\r\n                this.damage, this.enemydamage, this.fall,\r\n                this.jump, this.music], this.loadComplete, this);\r\n        }\r\n        loadComplete() {\r\n            this.music.loop = true;\r\n            this.music.play();\r\n            this.loaded = true;\r\n        }\r\n    }\r\n    exports.SoundManager = SoundManager;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\n\n//# sourceURL=webpack:///./scripts/managers/SoundManager.ts?");

/***/ })

/******/ });